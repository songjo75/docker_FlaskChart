services:
  spring-app:
    build: .      # 현재 폴더에 있는 Dockerfile을 실행해서 이미지를 만든다는 의미.
    container_name: spring-app
    ports:
      - "8089:8080"
    volumes:      # 로컬의 war 파일 위치와  컨테이너 war파일 위치를 연결
      - ./target/flask_chart.war:/usr/local/tomcat/webapps/ROOT.war
    depends_on:
      - db

  db:
    image: mysql:8.0
    container_name: spring-mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1212
      MYSQL_DATABASE: sample
      MYSQL_USER: testUser
      MYSQL_PASSWORD: 1212
    ports:
      - "3307:3306"
    volumes:
      - db-data:/var/lib/mysql   # db-data 라는 로컬(volume)을 Mysql 저장소와 연결
      - ./sample.sql:/docker-entrypoint-initdb.d/sample.sql   # dump파일을 복사해서 자동실행되면 데이터 생성.
    command:   # Mysql 시작시 사용할 옵션  ( 인증방식, 문자셋 설정, 정렬방식 설정 )
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci

  flask-app:
    build:
      context: ./flask-app    # flask-app 폴더에 있는 Dockerfile 을 사용한다는 의미
    container_name: flask-app
    ports:
      - "5000:5000"
    volumes:
      - ./flask-app:/app   # 로컬  /flask-app 폴더와  --->  컨테이너 /app 폴더 연결
    command: python spring_app.py   # 여기에서도 py 파일 실행 명령

    depends_on:   # mysql 을 사용하는 경우  ( 사용 안해도 써도 무관)
      - db
      
volumes:    # 볼륨 선언  ( db-data 라는 이름으로 볼륨 폴더를 만들겠다는 선언 ) 
  db-data: